Nat
  : *
  = mu A :: * . [Zero : {}; Succ : A] ;
zero
  : [Zero : {}; Succ : Nat]
  = [Zero {} of [Zero : {}; Succ : Nat]] ;
succ
  : Nat -> [Zero : {}; Succ : Nat]
  = \n : Nat . [Succ n of [Zero : {}; Succ : Nat]] ;
one
  : [Zero : {}; Succ : Nat]
  = [Succ [Zero {} of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] ;
two
  : [Zero : {}; Succ : Nat]
  = [Succ [Succ [Zero {} of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] ;
three
  : [Zero : {}; Succ : Nat]
  = [Succ [Succ [Succ [Zero {} of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] ;
four
  : [Zero : {}; Succ : Nat]
  = [Succ [Succ [Succ [Succ [Zero {} of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] ;
eight
  : [Zero : {}; Succ : Nat]
  = [Succ [Succ [Succ [Succ [Succ [Succ [Succ [Succ [Zero {} of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] ;
add
  : Nat -> Nat -> Nat
  = \m : Nat . \n : Nat . case n of [Zero _ -> m; Succ o -> fix (\add : Nat -> Nat -> Nat . \m : Nat . \n : Nat . case n of [Zero _ -> m; Succ o -> add (succ m) o]) [Succ m of [Zero : {}; Succ : Nat]] o] ;
mul
  : Nat -> Nat -> Nat
  = \m : Nat . \n : Nat . case n of [Zero _ -> [Zero {} of [Zero : {}; Succ : Nat]]; Succ o -> case fix (\mul : Nat -> Nat -> Nat . \m : Nat . \n : Nat . case n of [Zero _ -> zero; Succ o -> add m (mul m o)]) m o of [Zero _ -> m; Succ f -> fix (\b : Nat -> Nat -> Nat . \c : Nat . \d : Nat . case d of [Zero _ -> c; Succ e -> b [Succ c of [Zero : {}; Succ : Nat]] e]) [Succ m of [Zero : {}; Succ : Nat]] f]] ;
if_zero
  : forall A :: * . Nat -> A -> A -> A
  = \A :: * . \m : Nat . \n : A . \o : A . case m of [Zero _ -> n; Succ p -> o] ;
succ one
  : [Zero : {}; Succ : Nat]
  = [Succ [Succ [Zero {} of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] ;
add one zero
  : Nat
  = [Succ [Zero {} of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] ;
add one two
  : Nat
  = [Succ [Succ [Succ [Zero {} of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] ;
mul two two
  : Nat
  = [Succ [Succ [Succ [Succ [Zero {} of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] ;
mul two zero
  : Nat
  = [Zero {} of [Zero : {}; Succ : Nat]] ;
mul two (mul two two)
  : Nat
  = [Succ [Succ [Succ [Succ [Succ [Succ [Succ [Succ [Zero {} of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] ;
if_zero Nat zero one two
  : Nat
  = [Succ [Zero {} of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] ;
if_zero Nat one one two
  : Nat
  = [Succ [Succ [Zero {} of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] ;
if_zero Nat two one two
  : Nat
  = [Succ [Succ [Zero {} of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] ;
if_zero Nat (add (mul four four) one) (mul eight two) (add one (add two one))
  : Nat
  = [Succ [Succ [Succ [Succ [Zero {} of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] of [Zero : {}; Succ : Nat]] ;
