id
  : forall A :: * . A -> A
  = \A :: * . \x : A . x ;
app
  : forall A :: * . forall B :: * . (A -> B) -> A -> B
  = \A :: * . \B :: * . \f : A -> B . \x : A . f x ;
rev_app
  : forall A :: * . forall B :: * . A -> (A -> B) -> B
  = \A :: * . \B :: * . \x : A . \f : A -> B . f x ;
compose
  : forall A :: * . forall B :: * . forall C :: * . (A -> B) -> (C -> A) -> C -> B
  = \A :: * . \B :: * . \C :: * . \f : A -> B . \g : C -> A . \x : C . f (g x) ;
arg_swap
  : forall A :: * . forall B :: * . forall C :: * . (A -> B -> C) -> B -> A -> C
  = \A :: * . \B :: * . \C :: * . \f : A -> B -> C . \x : B . \y : A . f y x ;
rev_app'
  : forall A :: * . forall B :: * . A -> (A -> B) -> B
  = \A :: * . \B :: * . \x : A . \y : A -> B . y x ;
id'
  : forall A :: * . A -> A
  = \A :: * . \x : A . x ;
rev_app'
  : forall A :: * . forall B :: * . A -> (A -> B) -> B
  = \A :: * . \B :: * . \x : A . \y : A -> B . y x ;
id forall A :: * . A -> A id
  : forall A :: * . A -> A
  = \A :: * . \x : A . x ;
app forall A :: * . A -> A forall A :: * . A -> A (id forall A :: * . A -> A) id'
  : forall A :: * . A -> A
  = \A :: * . \x : A . x ;
rev_app forall A :: * . forall B :: * . (A -> B) -> A -> B forall A :: * . forall B :: * . (A -> B) -> A -> B app (id forall A :: * . forall B :: * . (A -> B) -> A -> B)
  : forall A :: * . forall B :: * . (A -> B) -> A -> B
  = \A :: * . \B :: * . \f : A -> B . \x : A . f x ;
rev_app' forall A :: * . forall B :: * . forall C :: * . (A -> B) -> (C -> A) -> C -> B forall A :: * . forall B :: * . forall C :: * . (A -> B) -> (C -> A) -> C -> B compose (id forall A :: * . forall B :: * . forall C :: * . (A -> B) -> (C -> A) -> C -> B)
  : forall A :: * . forall B :: * . forall C :: * . (A -> B) -> (C -> A) -> C -> B
  = \A :: * . \B :: * . \C :: * . \f : A -> B . \g : C -> A . \x : C . f (g x) ;
Omega
  : * => *
  = \A :: * . mu B :: * . B -> A ;
omega
  : forall A :: * . (Omega A) -> A
  = \A :: * . \x : Omega A . x x ;
