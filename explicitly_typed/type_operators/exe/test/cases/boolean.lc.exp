Bool
  : *
  = * -> * -> * ;
fls
  : * -> * -> *
  = t : * . f : * . f ;
tru
  : * -> * -> *
  = t : * . f : * . t ;
if
  : Bool -> * -> * -> *
  = p : Bool . t : * . e : * . p t e ;
Pair
  : * => * => * => *
  = A :: * . B :: * . C :: * . (A -> B -> C) -> C ;
BoolPair
  : *
  = ((* -> * -> *) -> (* -> * -> *) -> * -> * -> *) -> * -> * -> * ;
pair
  : Bool -> Bool -> (Bool -> Bool -> Bool) -> * -> * -> *
  = f : Bool . s : Bool . p : Bool -> Bool -> Bool . p f s ;
fst
  : BoolPair -> * -> * -> *
  = p : BoolPair . p (f : Bool . s : Bool . f) ;
snd
  : BoolPair -> * -> * -> *
  = p : BoolPair . p (f : Bool . s : Bool . s) ;
pair fls tru
  : ((* -> * -> *) -> (* -> * -> *) -> * -> * -> *) -> * -> * -> *
  = p : Bool -> Bool -> Bool . p (t : * . f : * . f) (t : * . f : * . t) ;
fst (pair fls tru)
  : * -> * -> *
  = t : * . f : * . f ;
snd (pair fls tru)
  : * -> * -> *
  = t : * . f : * . t ;
