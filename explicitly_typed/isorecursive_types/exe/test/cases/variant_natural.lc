Nat = mu A :: * . [Zero; Succ : A] ;

zero = roll Nat [Zero of [Zero; Succ : Nat]] ;

succ = \n : Nat .  roll Nat [Succ n of [Zero; Succ : Nat]] ;

one = succ zero ;

two = succ (succ zero) ;

three = succ (succ (succ zero)) ;

four = succ (succ (succ (succ zero))) ;

eight = succ (succ (succ (succ (succ (succ (succ (succ zero))))))) ;

add =
  fix (\add : Nat -> Nat -> Nat . \m : Nat . \n : Nat . case unroll n of [
    Zero -> m;
    Succ o -> add (succ m) o;
  ]) ;

until_zero =
  fix (\add : (Nat -> Nat) -> Nat -> Nat -> Nat .
    \fn : Nat -> Nat . \m : Nat . \n : Nat . case unroll n of [
      Zero -> m;
      Succ o -> add fn (fn m) o;
    ]) ;

if_zero = \m : Nat . \n : Nat . \o : Nat . case unroll m of [
  Zero -> n;
  Succ p -> o;
];

succ one ;

add one zero ;

add one two ;

if_zero zero one two ;

if_zero one one two ;

if_zero two one two ;
