Bool
  : *
  = forall A :: * . A -> A -> A ;
fls
  : forall A :: * . A -> A -> A
  = \A :: * . \t : A . \f : A . f ;
tru
  : forall A :: * . A -> A -> A
  = \A :: * . \t : A . \f : A . t ;
not
  : Bool -> forall A :: * . A -> A -> A
  = \p : Bool . p Bool (\A :: * . \t : A . \f : A . f) (\A :: * . \t : A . \f : A . t) ;
and
  : Bool -> Bool -> forall A :: * . A -> A -> A
  = \p : Bool . \q : Bool . p Bool q (\A :: * . \t : A . \f : A . f) ;
or
  : Bool -> Bool -> forall A :: * . A -> A -> A
  = \p : Bool . \q : Bool . p Bool (\A :: * . \t : A . \f : A . t) q ;
if
  : forall A :: * . Bool -> A -> A -> A
  = \A :: * . \p : Bool . \t : A . \e : A . p A t e ;
not fls
  : forall A :: * . A -> A -> A
  = \A :: * . \t : A . \f : A . t ;
not tru
  : forall A :: * . A -> A -> A
  = \A :: * . \t : A . \f : A . f ;
and fls fls
  : forall A :: * . A -> A -> A
  = \A :: * . \t : A . \f : A . f ;
and fls tru
  : forall A :: * . A -> A -> A
  = \A :: * . \t : A . \f : A . f ;
and tru fls
  : forall A :: * . A -> A -> A
  = \A :: * . \t : A . \f : A . f ;
and tru tru
  : forall A :: * . A -> A -> A
  = \A :: * . \t : A . \f : A . t ;
or fls fls
  : forall A :: * . A -> A -> A
  = \A :: * . \t : A . \f : A . f ;
or fls tru
  : forall A :: * . A -> A -> A
  = \A :: * . \t : A . \f : A . t ;
or tru fls
  : forall A :: * . A -> A -> A
  = \A :: * . \t : A . \f : A . t ;
or tru tru
  : forall A :: * . A -> A -> A
  = \A :: * . \t : A . \f : A . t ;
if Bool fls fls tru
  : forall A :: * . A -> A -> A
  = \A :: * . \t : A . \f : A . t ;
if Bool tru fls tru
  : forall A :: * . A -> A -> A
  = \A :: * . \t : A . \f : A . f ;
if forall A :: * . A -> A fls (\A :: * . \x : A . x) (\B :: * . \y : B . y)
  : forall A :: * . A -> A
  = \B :: * . \y : B . y ;
