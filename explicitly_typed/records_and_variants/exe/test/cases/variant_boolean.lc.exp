Bool
  : *
  = [False : {}; True : {}] ;
fls
  : Bool
  = [False {} of Bool] ;
tru
  : Bool
  = [True {} of Bool] ;
not
  : Bool -> Bool
  = \p : Bool . case p of [False _ -> [True {} of Bool]; True _ -> [False {} of Bool]] ;
and
  : Bool -> Bool -> Bool
  = \p : Bool . \q : Bool . case p of [False _ -> [False {} of Bool]; True _ -> q] ;
or
  : Bool -> Bool -> Bool
  = \p : Bool . \q : Bool . case p of [True _ -> [True {} of Bool]; False _ -> q] ;
if
  : forall A :: * . Bool -> A -> A -> A
  = \A :: * . \p : Bool . \t : A . \e : A . case p of [True _ -> t; False _ -> e] ;
not fls
  : [False : {}; True : {}]
  = [True {} of Bool] ;
not tru
  : [False : {}; True : {}]
  = [False {} of Bool] ;
and fls fls
  : [False : {}; True : {}]
  = [False {} of Bool] ;
and fls tru
  : [False : {}; True : {}]
  = [False {} of Bool] ;
and tru fls
  : [False : {}; True : {}]
  = [False {} of Bool] ;
and tru tru
  : [False : {}; True : {}]
  = [True {} of Bool] ;
or fls fls
  : [False : {}; True : {}]
  = [False {} of Bool] ;
or fls tru
  : [False : {}; True : {}]
  = [True {} of Bool] ;
or tru fls
  : [False : {}; True : {}]
  = [True {} of Bool] ;
or tru tru
  : [False : {}; True : {}]
  = [True {} of Bool] ;
if Bool fls fls tru
  : [False : {}; True : {}]
  = [True {} of Bool] ;
if Bool tru fls tru
  : [False : {}; True : {}]
  = [False {} of Bool] ;
if forall A :: * . A -> A fls (\A :: * . \x : A . x) (\B :: * . \y : B . y)
  : forall A :: * . A -> A
  = \B :: * . \y : B . y ;
