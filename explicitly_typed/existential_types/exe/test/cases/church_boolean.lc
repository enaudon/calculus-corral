Bool = * -> * -> * ;

fls = \t : * . \f : * . f ;

tru = \t : * . \f : * . t ;

if = \p : Bool . \t : * . \e : * . p t e ;

BoolPair = (Bool -> Bool -> Bool) -> Bool ;

pair = \f : Bool . \s : Bool . \p : Bool -> Bool -> Bool . p f s ;

fst = \p : BoolPair . p (\f : Bool . \s : Bool . f) ;

snd = \p : BoolPair . p (\f : Bool . \s : Bool . s) ;

pair fls tru ;

fst (pair fls tru) ;

snd (pair fls tru) ;

bool_lits = pack Bool, pair fls tru as exists A . (A -> A -> A) -> A ;

bool_lits' =
  unpack T, lits = bool_lits in
  pack
    T,
    (\f : T . \s : T . \p : T -> T -> T . p f s)
      ((\p : (T -> T -> T) -> T . p (\f : T . \s : T . s)) lits)
      ((\p : (T -> T -> T) -> T . p (\f : T . \s : T . f)) lits)
  as
  exists A . (A -> A -> A) -> A ;
