Nat = (* -> *) -> * -> * ;

zero = \s : * -> * . \z : * . z ;

one = \s : * -> * . \z : * . s z ;

two = \s : * -> * . \z : * . s (s z) ;

three = \s : * -> * . \z : * . s (s (s z)) ;

four = \s : * -> * . \z : * . s (s (s (s z))) ;

eight = \s : * -> * . \z : * . s (s (s (s (s (s (s (s z))))))) ;

succ = \n : Nat . \s : * -> * . \z : * . s (n s z) ;

add = \m : Nat . \n : Nat . \s : * -> * . \z : * . m s (n s z) ;

mul = \m : Nat . \n : Nat . \s : * -> * . m (n s) ;

if_zero =
  \m : Nat . \n : Nat . \o : Nat . \s : * -> * . \z : * .
    m (\x : * . o s z) (n s z) ;

succ one ;

add one zero ;

add one two ;

mul two two ;

mul two zero ;

mul two (mul two two) ;

if_zero zero one two ;

if_zero one one two ;

if_zero two one two ;

if_zero
  (add (mul four four) one)
  (mul eight two)
  (add one (add two one)) ;

NatPair = (Nat -> Nat -> Nat) -> Nat ;

pair = \f : Nat . \s : Nat . \p : Nat -> Nat -> Nat . p f s ;

fst = \p : NatPair .  p (\f : Nat . \s : Nat . f) ;

snd = \p : NatPair .  p (\f : Nat . \s : Nat . s) ;

pair zero one ;

fst (pair zero one) ;

snd (pair zero one) ;

NatBinOp = Nat -> Nat -> Nat ;

NatBinOpPair = (NatBinOp -> NatBinOp -> NatBinOp) -> NatBinOp ;

op_pair =
  \m : NatBinOp .
  \n : NatBinOp .
  \p : NatBinOp -> NatBinOp -> NatBinOp .
    p m n ;

nat_ops = pack NatBinOp, op_pair add mul as exists A . (A -> A -> A) -> A ;

nat_ops' =
  unpack T, ops = nat_ops in
  pack
    T,
    (\f : T . \s : T . \p : T -> T -> T . p f s)
      ((\p : (T -> T -> T) -> T . p (\f : T . \s : T . s)) ops)
      ((\p : (T -> T -> T) -> T . p (\f : T . \s : T . f)) ops)
  as
  exists A . (A -> A -> A) -> A ;
