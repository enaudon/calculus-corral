Bool = * -> * -> * ;

fls = \x : * . \y : * . y ;

tru = \x : * . \y : * . x ;

if = \p : Bool . \x : * . \y : * . p x y ;

BoolPair = (Bool -> Bool -> Bool) -> Bool ;

pair = \x : Bool . \y : Bool . \p : Bool -> Bool -> Bool . p x y ;

fst = \p : BoolPair . p (\x : Bool . \y : Bool . x) ;

snd = \p : BoolPair . p (\x : Bool . \y : Bool . y) ;

pair fls tru ;

fst (pair fls tru) ;

snd (pair fls tru) ;

bool_lits = pack Bool, pair fls tru as exists A . (A -> A -> A) -> A ;

bool_lits' =
  unpack T, lits = bool_lits in
  pack
    T,
    (\x : T . \y : T . \p : T -> T -> T . p x y)
      ((\p : (T -> T -> T) -> T . p (\x : T . \y : T . y)) lits)
      ((\p : (T -> T -> T) -> T . p (\x : T . \y : T . x)) lits)
  as
  exists A . (A -> A -> A) -> A ;
