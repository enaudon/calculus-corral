zero
  : (* -> *) -> * -> *
  = s : * -> * . z : * . z ;
one
  : (* -> *) -> * -> *
  = s : * -> * . z : * . s z ;
two
  : (* -> *) -> * -> *
  = s : * -> * . z : * . s (s z) ;
three
  : (* -> *) -> * -> *
  = s : * -> * . z : * . s (s (s z)) ;
four
  : (* -> *) -> * -> *
  = s : * -> * . z : * . s (s (s (s z))) ;
eight
  : (* -> *) -> * -> *
  = s : * -> * . z : * . s (s (s (s (s (s (s (s z))))))) ;
succ
  : ((* -> *) -> * -> *) -> (* -> *) -> * -> *
  = n : (* -> *) -> * -> * . s : * -> * . z : * . s (n s z) ;
add
  : ((* -> *) -> * -> *) -> ((* -> *) -> * -> *) -> (* -> *) -> * -> *
  = m : (* -> *) -> * -> * . n : (* -> *) -> * -> * . s : * -> * . z : * . m s (n s z) ;
mul
  : ((* -> *) -> * -> *) -> ((* -> *) -> * -> *) -> (* -> *) -> * -> *
  = m : (* -> *) -> * -> * . n : (* -> *) -> * -> * . s : * -> * . m (n s) ;
if_zero
  : ((* -> *) -> * -> *) -> ((* -> *) -> * -> *) -> ((* -> *) -> * -> *) -> (* -> *) -> * -> *
  = m : (* -> *) -> * -> * . n : (* -> *) -> * -> * . o : (* -> *) -> * -> * . s : * -> * . z : * . m (x : * . o s z) (n s z) ;
succ one
  : (* -> *) -> * -> *
  = s : * -> * . z : * . s ((s : * -> * . z : * . s z) s z) ;
add one zero
  : (* -> *) -> * -> *
  = s : * -> * . z : * . (_0 : * -> * . _1 : * . _0 _1) s ((s : * -> * . z : * . z) s z) ;
add one two
  : (* -> *) -> * -> *
  = s : * -> * . z : * . (_2 : * -> * . _3 : * . _2 _3) s ((s : * -> * . z : * . s (s z)) s z) ;
mul two two
  : (* -> *) -> * -> *
  = s : * -> * . (_4 : * -> * . z : * . _4 (_4 z)) ((s : * -> * . z : * . s (s z)) s) ;
mul two zero
  : (* -> *) -> * -> *
  = s : * -> * . (_5 : * -> * . z : * . _5 (_5 z)) ((s : * -> * . z : * . z) s) ;
mul two (mul two two)
  : (* -> *) -> * -> *
  = s : * -> * . (_7 : * -> * . z : * . _7 (_7 z)) ((s : * -> * . (_6 : * -> * . z : * . _6 (_6 z)) ((s : * -> * . z : * . s (s z)) s)) s) ;
if_zero zero one two
  : (* -> *) -> * -> *
  = s : * -> * . z : * . (_8 : * -> * . _9 : * . _9) (x : * . (s : * -> * . z : * . s (s z)) s z) ((_10 : * -> * . _11 : * . _10 _11) s z) ;
if_zero one one two
  : (* -> *) -> * -> *
  = s : * -> * . z : * . (_12 : * -> * . _13 : * . _12 _13) (x : * . (s : * -> * . z : * . s (s z)) s z) ((_14 : * -> * . _15 : * . _14 _15) s z) ;
if_zero two one two
  : (* -> *) -> * -> *
  = s : * -> * . z : * . (_16 : * -> * . _17 : * . _16 (_16 _17)) (x : * . (s : * -> * . z : * . s (s z)) s z) ((_18 : * -> * . _19 : * . _18 _19) s z) ;
if_zero (add (mul four four) one) (mul eight two) (add one (add two one))
  : (* -> *) -> * -> *
  = s : * -> * . z : * . (_26 : * -> * . _27 : * . (_21 : * -> * . (_20 : * -> * . _24 : * . _20 (_20 (_20 (_20 _24)))) ((_22 : * -> * . _23 : * . _22 (_22 (_22 (_22 _23)))) _21)) _26 ((_28 : * -> * . _29 : * . _28 _29) _26 _27)) (x : * . (s : * -> * . z : * . (_32 : * -> * . _33 : * . _32 _33) s ((s : * -> * . z : * . (_30 : * -> * . _31 : * . _30 (_30 _31)) s ((s : * -> * . z : * . s z) s z)) s z)) s z) ((_34 : * -> * . (_25 : * -> * . _37 : * . _25 (_25 (_25 (_25 (_25 (_25 (_25 (_25 _37)))))))) ((_35 : * -> * . _36 : * . _35 (_35 _36)) _34)) s z) ;
pair
  : ((* -> *) -> * -> *) -> ((* -> *) -> * -> *) -> (((* -> *) -> * -> *) -> ((* -> *) -> * -> *) -> (* -> *) -> * -> *) -> (* -> *) -> * -> *
  = m : (* -> *) -> * -> * . n : (* -> *) -> * -> * . p : ((* -> *) -> * -> *) -> ((* -> *) -> * -> *) -> (* -> *) -> * -> * . p m n ;
fst
  : ((((* -> *) -> * -> *) -> ((* -> *) -> * -> *) -> (* -> *) -> * -> *) -> (* -> *) -> * -> *) -> (* -> *) -> * -> *
  = p : (((* -> *) -> * -> *) -> ((* -> *) -> * -> *) -> (* -> *) -> * -> *) -> (* -> *) -> * -> * . p (m : (* -> *) -> * -> * . n : (* -> *) -> * -> * . m) ;
snd
  : ((((* -> *) -> * -> *) -> ((* -> *) -> * -> *) -> (* -> *) -> * -> *) -> (* -> *) -> * -> *) -> (* -> *) -> * -> *
  = p : (((* -> *) -> * -> *) -> ((* -> *) -> * -> *) -> (* -> *) -> * -> *) -> (* -> *) -> * -> * . p (m : (* -> *) -> * -> * . n : (* -> *) -> * -> * . n) ;
pair zero one
  : (((* -> *) -> * -> *) -> ((* -> *) -> * -> *) -> (* -> *) -> * -> *) -> (* -> *) -> * -> *
  = p : ((* -> *) -> * -> *) -> ((* -> *) -> * -> *) -> (* -> *) -> * -> * . p (s : * -> * . z : * . z) (s : * -> * . z : * . s z) ;
fst (pair zero one)
  : (* -> *) -> * -> *
  = s : * -> * . z : * . z ;
snd (pair zero one)
  : (* -> *) -> * -> *
  = s : * -> * . z : * . s z ;
