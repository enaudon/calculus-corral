\x . x : exists 'A . 'A -> 'A ;

(\x . x) : exists 'A . 'A -> 'A ;

\x . x : exists 'B . 'B -> 'B ;

\x . x : exists 'A . 'A -> 'A : exists 'B . 'B -> 'B ;

(\x . x) : exists 'B . 'B -> 'B : exists 'C . 'C -> 'C ;

let app = \x . \f . f x in
\x . app (x : exists 'A . 'A -> 'A) ;

let id = \x . x in
\x . id x : exists 'A . 'A -> 'A ;

let fn = \x . x in fn : exists 'A . 'A -> 'A ;

(let fn = \x . x in fn) : exists 'A . 'A -> 'A ;

\x . x : forall 'A . 'A -> 'A ;

(\x . x) : forall 'A . 'A -> 'A ;
