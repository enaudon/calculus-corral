fls
  : 'A -> 'A -> 'A
  = \A :: * . \t : A . \f : A . f ;
tru
  : 'A -> 'A -> 'A
  = \A :: * . \t : A . \f : A . t ;
not
  : (('A -> 'A -> 'A) -> ('B -> 'B -> 'B) -> 'C) -> 'C
  = \A :: * . \B :: * . \C :: * . \p : (A -> A -> A) -> (B -> B -> B) -> C . p (\t : A . \f : A . f) (\t : B . \f : B . t) ;
and
  : ('A -> ('B -> 'B -> 'B) -> 'C) -> 'A -> 'C
  = \A :: * . \B :: * . \C :: * . \p : A -> (B -> B -> B) -> C . \q : A . p q (\t : B . \f : B . f) ;
or
  : (('A -> 'A -> 'A) -> 'B -> 'C) -> 'B -> 'C
  = \A :: * . \B :: * . \C :: * . \p : (A -> A -> A) -> B -> C . \q : B . p (\t : A . \f : A . t) q ;
if
  : ('A -> 'B -> 'C) -> 'A -> 'B -> 'C
  = \A :: * . \B :: * . \C :: * . \p : A -> B -> C . \t : A . \e : B . p t e ;
not fls
  : 'A -> 'A -> 'A
  = \A :: * . \t : A . \f : A . t ;
not tru
  : 'A -> 'A -> 'A
  = \A :: * . \t : A . \f : A . f ;
and fls fls
  : 'A -> 'A -> 'A
  = \A :: * . \t : A . \f : A . f ;
and fls tru
  : 'A -> 'A -> 'A
  = \A :: * . \t : A . \f : A . f ;
and tru fls
  : 'A -> 'A -> 'A
  = \A :: * . \t : A . \f : A . f ;
and tru tru
  : 'A -> 'A -> 'A
  = \A :: * . \t : A . \f : A . t ;
or fls fls
  : 'A -> 'A -> 'A
  = \A :: * . \t : A . \f : A . f ;
or fls tru
  : 'A -> 'A -> 'A
  = \A :: * . \t : A . \f : A . t ;
or tru fls
  : 'A -> 'A -> 'A
  = \A :: * . \t : A . \f : A . t ;
or tru tru
  : 'A -> 'A -> 'A
  = \A :: * . \t : A . \f : A . t ;
if fls fls tru
  : 'A -> 'A -> 'A
  = \A :: * . \t : A . \f : A . t ;
if tru fls tru
  : 'A -> 'A -> 'A
  = \A :: * . \t : A . \f : A . f ;
if fls (\x . x) (\y . y)
  : 'A -> 'A
  = \A :: * . \y : A . y ;
