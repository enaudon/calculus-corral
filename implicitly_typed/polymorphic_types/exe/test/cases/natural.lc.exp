zero
  : A -> B -> B
  = <value> ;
one
  : (A -> B) -> A -> B
  = <value> ;
two
  : (A -> A) -> A -> A
  = <value> ;
three
  : (A -> A) -> A -> A
  = <value> ;
four
  : (A -> A) -> A -> A
  = <value> ;
eight
  : (A -> A) -> A -> A
  = <value> ;
succ
  : ((A -> B) -> C -> A) -> (A -> B) -> C -> B
  = <value> ;
add
  : (A -> B -> C) -> (A -> D -> B) -> A -> D -> C
  = <value> ;
mul
  : (A -> B) -> (C -> A) -> C -> B
  = <value> ;
if_zero
  : ((A -> B) -> C -> D) -> (E -> F -> C) -> (E -> F -> B) -> E -> F -> D
  = <value> ;
succ one
  : (A -> A) -> A -> A
  = <value> ;
add one zero
  : (A -> B) -> A -> B
  = <value> ;
add one two
  : (A -> A) -> A -> A
  = <value> ;
mul two two
  : (A -> A) -> A -> A
  = <value> ;
mul two zero
  : A -> B -> B
  = <value> ;
mul two (mul two two)
  : (A -> A) -> A -> A
  = <value> ;
if_zero zero one two
  : (A -> A) -> A -> A
  = <value> ;
if_zero one one two
  : (A -> A) -> A -> A
  = <value> ;
if_zero two one two
  : (A -> A) -> A -> A
  = <value> ;
if_zero (add (mul four four) one) (mul eight two) (add one (add two one))
  : (A -> A) -> A -> A
  = <value> ;
pair
  : A -> B -> (A -> B -> C) -> C
  = <value> ;
fst
  : ((A -> B -> A) -> C) -> C
  = <value> ;
snd
  : ((A -> B -> B) -> C) -> C
  = <value> ;
pair zero one
  : ((A -> B -> B) -> ((C -> D) -> C -> D) -> E) -> E
  = <value> ;
fst (pair zero one)
  : A -> B -> B
  = <value> ;
snd (pair zero one)
  : (A -> B) -> A -> B
  = <value> ;
pair zero (x . x)
  : ((A -> B -> B) -> (C -> C) -> D) -> D
  = <value> ;
fst (pair zero (x . x))
  : A -> B -> B
  = <value> ;
snd (pair zero (x . x))
  : A -> A
  = <value> ;
