zero
  : _0 -> _1 -> _1
  = <value> ;
one
  : (_0 -> _1) -> _0 -> _1
  = <value> ;
two
  : (_0 -> _0) -> _0 -> _0
  = <value> ;
three
  : (_0 -> _0) -> _0 -> _0
  = <value> ;
four
  : (_0 -> _0) -> _0 -> _0
  = <value> ;
eight
  : (_0 -> _0) -> _0 -> _0
  = <value> ;
succ
  : ((_0 -> _1) -> _2 -> _0) -> (_0 -> _1) -> _2 -> _1
  = <value> ;
add
  : (_0 -> _1 -> _2) -> (_0 -> _3 -> _1) -> _0 -> _3 -> _2
  = <value> ;
mul
  : (_0 -> _1) -> (_2 -> _0) -> _2 -> _1
  = <value> ;
if_zero
  : ((_0 -> _1) -> _2 -> _3) -> (_4 -> _5 -> _2) -> (_4 -> _5 -> _1) -> _4 -> _5 -> _3
  = <value> ;
succ one
  : (_0 -> _0) -> _0 -> _0
  = <value> ;
add one zero
  : (_0 -> _1) -> _0 -> _1
  = <value> ;
add one two
  : (_0 -> _0) -> _0 -> _0
  = <value> ;
mul two two
  : (_0 -> _0) -> _0 -> _0
  = <value> ;
mul two zero
  : (_0 -> _0) -> _0 -> _0
  = <value> ;
mul two (mul two two)
  : (_0 -> _0) -> _0 -> _0
  = <value> ;
if_zero zero one two
  : (_0 -> _0) -> _0 -> _0
  = <value> ;
if_zero one one two
  : (_0 -> _0) -> _0 -> _0
  = <value> ;
if_zero two one two
  : (_0 -> _0) -> _0 -> _0
  = <value> ;
if_zero (add (mul four four) one) (mul eight two) (add one (add two one))
  : (_0 -> _0) -> _0 -> _0
  = <value> ;
pair
  : _0 -> _1 -> (_0 -> _1 -> _2) -> _2
  = <value> ;
fst
  : ((_0 -> _1 -> _0) -> _2) -> _2
  = <value> ;
snd
  : ((_0 -> _1 -> _1) -> _2) -> _2
  = <value> ;
pair zero one
  : (((_0 -> _0) -> _0 -> _0) -> ((_0 -> _0) -> _0 -> _0) -> _1) -> _1
  = <value> ;
fst (pair zero one)
  : (_0 -> _0) -> _0 -> _0
  = <value> ;
snd (pair zero one)
  : (_0 -> _0) -> _0 -> _0
  = <value> ;
