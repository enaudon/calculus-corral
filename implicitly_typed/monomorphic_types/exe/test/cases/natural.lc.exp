zero
  : _0 -> _1 -> _1
  = s . z . z ;
one
  : (_0 -> _1) -> _0 -> _1
  = s . z . s z ;
two
  : (_0 -> _0) -> _0 -> _0
  = s . z . s (s z) ;
three
  : (_0 -> _0) -> _0 -> _0
  = s . z . s (s (s z)) ;
four
  : (_0 -> _0) -> _0 -> _0
  = s . z . s (s (s (s z))) ;
eight
  : (_0 -> _0) -> _0 -> _0
  = s . z . s (s (s (s (s (s (s (s z))))))) ;
succ
  : ((_0 -> _1) -> _2 -> _0) -> (_0 -> _1) -> _2 -> _1
  = n . s . z . s (n s z) ;
add
  : (_0 -> _1 -> _2) -> (_0 -> _3 -> _1) -> _0 -> _3 -> _2
  = m . n . s . z . m s (n s z) ;
mul
  : (_0 -> _1) -> (_2 -> _0) -> _2 -> _1
  = m . n . s . m (n s) ;
if_zero
  : ((_0 -> _1) -> _2 -> _3) -> (_4 -> _5 -> _2) -> (_4 -> _5 -> _1) -> _4 -> _5 -> _3
  = m . n . o . s . z . m (x . o s z) (n s z) ;
succ one
  : (_0 -> _0) -> _0 -> _0
  = s . z . s (s z) ;
add one zero
  : (_0 -> _1) -> _0 -> _1
  = s . z . s z ;
add one two
  : (_0 -> _0) -> _0 -> _0
  = s . z . s (s (s z)) ;
mul two two
  : (_0 -> _0) -> _0 -> _0
  = s . z . s (s (s (s z))) ;
mul two zero
  : (_0 -> _0) -> _0 -> _0
  = s . z . z ;
mul two (mul two two)
  : (_0 -> _0) -> _0 -> _0
  = s . z . s (s (s (s (s (s (s (s z))))))) ;
if_zero zero one two
  : (_0 -> _0) -> _0 -> _0
  = s . z . s z ;
if_zero one one two
  : (_0 -> _0) -> _0 -> _0
  = s . z . s (s z) ;
if_zero two one two
  : (_0 -> _0) -> _0 -> _0
  = s . z . s (s z) ;
if_zero (add (mul four four) one) (mul eight two) (add one (add two one))
  : (_0 -> _0) -> _0 -> _0
  = s . z . s (s (s (s z))) ;
pair
  : _0 -> _1 -> (_0 -> _1 -> _2) -> _2
  = m . n . p . p m n ;
fst
  : ((_0 -> _1 -> _0) -> _2) -> _2
  = p . p (m . n . m) ;
snd
  : ((_0 -> _1 -> _1) -> _2) -> _2
  = p . p (m . n . n) ;
pair zero one
  : (((_0 -> _0) -> _0 -> _0) -> ((_0 -> _0) -> _0 -> _0) -> _1) -> _1
  = p . p (s . z . z) (s . z . s z) ;
fst (pair zero one)
  : (_0 -> _0) -> _0 -> _0
  = s . z . z ;
snd (pair zero one)
  : (_0 -> _0) -> _0 -> _0
  = s . z . s z ;
