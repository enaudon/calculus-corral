List
  : * => *
  = \A :: * . mu List :: * . [Nil : {}; Cons : {head : A; tail : List}] ;
nil
  : mu List :: * . [Nil : {}; Cons : {head : 'A; tail : List}]
  = \A :: * . roll mu List :: * . [Nil : {}; Cons : {head : A; tail : List}] [Nil {} of [Nil : {}; Cons : {head : A; tail : mu List :: * . [Nil : {}; Cons : {head : A; tail : List}]}]] ;
cons
  : 'A -> (mu List :: * . [Nil : {}; Cons : {head : 'A; tail : List}]) -> mu List :: * . [Nil : {}; Cons : {head : 'A; tail : List}]
  = \A :: * . \hd : A . \tl : mu List :: * . [Nil : {}; Cons : {head : A; tail : List}] . roll mu List :: * . [Nil : {}; Cons : {head : A; tail : List}] [Cons {head : hd; tail : tl} of [Cons : {head : A; tail : mu List :: * . [Nil : {}; Cons : {head : A; tail : List}]}; Nil : {}]] ;
is_empty
  : (mu List :: * . [Nil : {}; Cons : {head : 'A; tail : List}]) -> [False : {}; True : {}]
  = \A :: * . \list : mu List :: * . [Nil : {}; Cons : {head : A; tail : List}] . case unroll list of [Nil _ -> [True {} of [True : {}; False : {}]]; Cons c -> [False {} of [False : {}; True : {}]]] ;
head
  : (mu List :: * . [Nil : {}; Cons : {head : 'A; tail : List}]) -> [None : {}; Some : 'A]
  = \A :: * . \list : mu List :: * . [Nil : {}; Cons : {head : A; tail : List}] . case unroll list of [Nil _ -> [None {} of [None : {}; Some : A]]; Cons c -> [Some c.head of [Some : A; None : {}]]] ;
tail
  : (mu List :: * . [Nil : {}; Cons : {head : 'A; tail : List}]) -> [None : {}; Some : mu List :: * . [Nil : {}; Cons : {head : 'A; tail : List}]]
  = \A :: * . \list : mu List :: * . [Nil : {}; Cons : {head : A; tail : List}] . case unroll list of [Nil _ -> [None {} of [None : {}; Some : mu List :: * . [Nil : {}; Cons : {head : A; tail : List}]]]; Cons c -> [Some c.tail of [Some : mu List :: * . [Nil : {}; Cons : {head : A; tail : List}]; None : {}]]] ;
map
  : ('A -> 'B) -> (mu List :: * . [Nil : {}; Cons : {head : 'A; tail : List}]) -> mu List :: * . [Nil : {}; Cons : {head : 'B; tail : List}]
  = \A :: * . \B :: * . fix (\map : (A -> B) -> (mu C :: * . [Nil : {}; Cons : {head : A; tail : C}]) -> mu D :: * . [Nil : {}; Cons : {head : B; tail : D}] . \fn : A -> B . \list : mu E :: * . [Nil : {}; Cons : {head : A; tail : E}] . case unroll list of [Nil _ -> roll mu F :: * . [Nil : {}; Cons : {head : B; tail : F}] [Nil {} of [Nil : {}; Cons : {head : B; tail : mu G :: * . [Nil : {}; Cons : {head : B; tail : G}]}]]; Cons c -> roll mu H :: * . [Nil : {}; Cons : {head : B; tail : H}] [Cons {head : fn c.head; tail : map fn c.tail} of [Cons : {head : B; tail : mu I :: * . [Nil : {}; Cons : {head : B; tail : I}]}; Nil : {}]]]) ;
fold_left
  : ('A -> 'B -> 'A) -> 'A -> (mu List :: * . [Nil : {}; Cons : {head : 'B; tail : List}]) -> 'A
  = \A :: * . \B :: * . fix (\fold_left : (A -> B -> A) -> A -> (mu C :: * . [Nil : {}; Cons : {head : B; tail : C}]) -> A . \fn : A -> B -> A . \acc : A . \list : mu D :: * . [Nil : {}; Cons : {head : B; tail : D}] . case unroll list of [Nil _ -> acc; Cons c -> fold_left fn (fn acc c.head) c.tail]) ;
fold_right
  : ('A -> 'B -> 'B) -> 'B -> (mu List :: * . [Nil : {}; Cons : {head : 'A; tail : List}]) -> 'B
  = \A :: * . \B :: * . fix (\fold_right : (A -> B -> B) -> B -> (mu C :: * . [Nil : {}; Cons : {head : A; tail : C}]) -> B . \fn : A -> B -> B . \acc : B . \list : mu D :: * . [Nil : {}; Cons : {head : A; tail : D}] . case unroll list of [Nil _ -> acc; Cons c -> fn c.head (fold_right fn acc c.tail)]) ;
bools
  : mu List :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : List}]
  = roll mu A :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : A}] [Cons {head : [True {} of [True : {}; False : {}]]; tail : roll mu B :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : B}] [Cons {head : [False {} of [False : {}; True : {}]]; tail : roll mu C :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : C}] [Cons {head : [True {} of [True : {}; False : {}]]; tail : roll mu D :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : D}] [Nil {} of [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : mu E :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : E}]}]]} of [Cons : {head : [False : {}; True : {}]; tail : mu F :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : F}]}; Nil : {}]]} of [Cons : {head : [False : {}; True : {}]; tail : mu G :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : G}]}; Nil : {}]]} of [Cons : {head : [False : {}; True : {}]; tail : mu H :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : H}]}; Nil : {}]] ;
map not bools
  : mu List :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : List}]
  = roll mu H :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : H}] [Cons {head : [False {} of [False : {}; True : {}]]; tail : roll mu H :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : H}] [Cons {head : [True {} of [True : {}; False : {}]]; tail : roll mu H :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : H}] [Cons {head : [False {} of [False : {}; True : {}]]; tail : roll mu F :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : F}] [Nil {} of [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : mu G :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : G}]}]]} of [Cons : {head : [False : {}; True : {}]; tail : mu I :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : I}]}; Nil : {}]]} of [Cons : {head : [False : {}; True : {}]; tail : mu I :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : I}]}; Nil : {}]]} of [Cons : {head : [False : {}; True : {}]; tail : mu I :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : I}]}; Nil : {}]] ;
map (\b . if b one zero) bools
  : mu List :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : List}]
  = roll mu H :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : H}] [Cons {head : roll mu A :: * . [Zero : {}; Succ : A] [Succ (roll mu A :: * . [Zero : {}; Succ : A] [Zero {} of [Zero : {}; Succ : mu A :: * . [Zero : {}; Succ : A]]]) of [Succ : mu A :: * . [Zero : {}; Succ : A]; Zero : {}]]; tail : roll mu H :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : H}] [Cons {head : roll mu A :: * . [Zero : {}; Succ : A] [Zero {} of [Zero : {}; Succ : mu A :: * . [Zero : {}; Succ : A]]]; tail : roll mu H :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : H}] [Cons {head : roll mu A :: * . [Zero : {}; Succ : A] [Succ (roll mu A :: * . [Zero : {}; Succ : A] [Zero {} of [Zero : {}; Succ : mu A :: * . [Zero : {}; Succ : A]]]) of [Succ : mu A :: * . [Zero : {}; Succ : A]; Zero : {}]]; tail : roll mu F :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : F}] [Nil {} of [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : mu G :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : G}]}]]} of [Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : mu I :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : I}]}; Nil : {}]]} of [Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : mu I :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : I}]}; Nil : {}]]} of [Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : mu I :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : I}]}; Nil : {}]] ;
fold_left and tru bools
  : [False : {}; True : {}]
  = [False {} of [False : {}; True : {}]] ;
fold_left or fls bools
  : [True : {}; False : {}]
  = [True {} of [True : {}; False : {}]] ;
nats
  : mu List :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : List}]
  = roll mu A :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : A}] [Cons {head : roll mu A :: * . [Zero : {}; Succ : A] [Zero {} of [Zero : {}; Succ : mu A :: * . [Zero : {}; Succ : A]]]; tail : roll mu B :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : B}] [Cons {head : roll mu A :: * . [Zero : {}; Succ : A] [Succ (roll mu A :: * . [Zero : {}; Succ : A] [Zero {} of [Zero : {}; Succ : mu A :: * . [Zero : {}; Succ : A]]]) of [Succ : mu A :: * . [Zero : {}; Succ : A]; Zero : {}]]; tail : roll mu C :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : C}] [Cons {head : roll mu A :: * . [Zero : {}; Succ : A] [Succ (roll mu A :: * . [Zero : {}; Succ : A] [Succ (roll mu A :: * . [Zero : {}; Succ : A] [Zero {} of [Zero : {}; Succ : mu A :: * . [Zero : {}; Succ : A]]]) of [Succ : mu A :: * . [Zero : {}; Succ : A]; Zero : {}]]) of [Succ : mu A :: * . [Zero : {}; Succ : A]; Zero : {}]]; tail : roll mu D :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : D}] [Nil {} of [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : mu E :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : E}]}]]} of [Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : mu F :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : F}]}; Nil : {}]]} of [Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : mu G :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : G}]}; Nil : {}]]} of [Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : mu H :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : H}]}; Nil : {}]] ;
map (\n . if_zero n tru fls) nats
  : mu List :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : List}]
  = roll mu H :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : H}] [Cons {head : [True {} of [True : {}; False : {}]]; tail : roll mu H :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : H}] [Cons {head : [False {} of [False : {}; True : {}]]; tail : roll mu H :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : H}] [Cons {head : [False {} of [False : {}; True : {}]]; tail : roll mu F :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : F}] [Nil {} of [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : mu G :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : G}]}]]} of [Cons : {head : [False : {}; True : {}]; tail : mu I :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : I}]}; Nil : {}]]} of [Cons : {head : [False : {}; True : {}]; tail : mu I :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : I}]}; Nil : {}]]} of [Cons : {head : [False : {}; True : {}]; tail : mu I :: * . [Nil : {}; Cons : {head : [False : {}; True : {}]; tail : I}]}; Nil : {}]] ;
map (add two) nats
  : mu List :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : List}]
  = roll mu H :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : H}] [Cons {head : roll mu A :: * . [Zero : {}; Succ : A] [Succ (roll mu A :: * . [Zero : {}; Succ : A] [Succ (roll mu A :: * . [Zero : {}; Succ : A] [Zero {} of [Zero : {}; Succ : mu A :: * . [Zero : {}; Succ : A]]]) of [Succ : mu A :: * . [Zero : {}; Succ : A]; Zero : {}]]) of [Succ : mu A :: * . [Zero : {}; Succ : A]; Zero : {}]]; tail : roll mu H :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : H}] [Cons {head : roll mu A :: * . [Zero : {}; Succ : A] [Succ (roll mu A :: * . [Zero : {}; Succ : A] [Succ (roll mu A :: * . [Zero : {}; Succ : A] [Succ (roll mu A :: * . [Zero : {}; Succ : A] [Zero {} of [Zero : {}; Succ : mu A :: * . [Zero : {}; Succ : A]]]) of [Succ : mu A :: * . [Zero : {}; Succ : A]; Zero : {}]]) of [Succ : mu A :: * . [Zero : {}; Succ : A]; Zero : {}]]) of [Succ : mu A :: * . [Zero : {}; Succ : A]; Zero : {}]]; tail : roll mu H :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : H}] [Cons {head : roll mu A :: * . [Zero : {}; Succ : A] [Succ (roll mu A :: * . [Zero : {}; Succ : A] [Succ (roll mu A :: * . [Zero : {}; Succ : A] [Succ (roll mu A :: * . [Zero : {}; Succ : A] [Succ (roll mu A :: * . [Zero : {}; Succ : A] [Zero {} of [Zero : {}; Succ : mu A :: * . [Zero : {}; Succ : A]]]) of [Succ : mu A :: * . [Zero : {}; Succ : A]; Zero : {}]]) of [Succ : mu A :: * . [Zero : {}; Succ : A]; Zero : {}]]) of [Succ : mu A :: * . [Zero : {}; Succ : A]; Zero : {}]]) of [Succ : mu A :: * . [Zero : {}; Succ : A]; Zero : {}]]; tail : roll mu F :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : F}] [Nil {} of [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : mu G :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : G}]}]]} of [Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : mu I :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : I}]}; Nil : {}]]} of [Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : mu I :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : I}]}; Nil : {}]]} of [Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : mu I :: * . [Nil : {}; Cons : {head : mu A :: * . [Zero : {}; Succ : A]; tail : I}]}; Nil : {}]] ;
fold_right add zero nats
  : mu A :: * . [Zero : {}; Succ : A]
  = roll mu A :: * . [Zero : {}; Succ : A] [Succ (roll mu A :: * . [Zero : {}; Succ : A] [Succ (roll mu A :: * . [Zero : {}; Succ : A] [Succ (roll mu A :: * . [Zero : {}; Succ : A] [Zero {} of [Zero : {}; Succ : mu A :: * . [Zero : {}; Succ : A]]]) of [Succ : mu A :: * . [Zero : {}; Succ : A]; Zero : {}]]) of [Succ : mu A :: * . [Zero : {}; Succ : A]; Zero : {}]]) of [Succ : mu A :: * . [Zero : {}; Succ : A]; Zero : {}]] ;
